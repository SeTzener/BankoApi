// <auto-generated />
using System;
using BankoApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BankoApi.Migrations
{
    [DbContext(typeof(BankoDbContext))]
    [Migration("20250107025814_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BankoApi.Data.Nordigen.Balance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BalanceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Balances");
                });

            modelBuilder.Entity("BankoApi.Data.Nordigen.BankTransactions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("BankTransactions");

                    b.HasAnnotation("Relational:JsonPropertyName", "transactions");
                });

            modelBuilder.Entity("BankoApi.Data.Nordigen.Booked", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BankTransactionCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BankTransactionsId")
                        .HasColumnType("int");

                    b.Property<string>("BookingDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreditorAccountId")
                        .HasColumnType("int");

                    b.Property<string>("CreditorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DebtorAccountId")
                        .HasColumnType("int");

                    b.Property<string>("DebtorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalTransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("RemittanceInformationStructuredArray")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RemittanceInformationUnstructured")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("RemittanceInformationUnstructuredArray")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransactionAmountId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValueDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BankTransactionsId");

                    b.HasIndex("CreditorAccountId");

                    b.HasIndex("DebtorAccountId");

                    b.HasIndex("TransactionAmountId");

                    b.ToTable("Booked");
                });

            modelBuilder.Entity("BankoApi.Data.Nordigen.CreditorAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bban")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Iban")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CreditorAccount");
                });

            modelBuilder.Entity("BankoApi.Data.Nordigen.DebtorAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bban")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Iban")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DebtorAccount");
                });

            modelBuilder.Entity("BankoApi.Data.Nordigen.Institution", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BIC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("Countries")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxAccessValidForDays")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransactionTotalDays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Institutions");
                });

            modelBuilder.Entity("BankoApi.Data.Nordigen.Pending", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BankTransactionsId")
                        .HasColumnType("int");

                    b.Property<string>("BookingDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RemittanceInformationUnstructured")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("RemittanceInformationUnstructuredArray")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransactionAmountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BankTransactionsId");

                    b.HasIndex("TransactionAmountId");

                    b.ToTable("Pending");
                });

            modelBuilder.Entity("BankoApi.Data.Nordigen.Requisition", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("AccountSelection")
                        .HasColumnType("bit");

                    b.PrimitiveCollection<string>("Accounts")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Agreement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("InstitutionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Redirect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RedirectImmediate")
                        .HasColumnType("bit");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SSN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Requisitions");
                });

            modelBuilder.Entity("BankoApi.Data.Nordigen.TransactionAmount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TransactionAmount");
                });

            modelBuilder.Entity("BankoApi.Data.Nordigen.Transactions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BankTransactionsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BankTransactionsId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("BankoApi.Data.Nordigen.Booked", b =>
                {
                    b.HasOne("BankoApi.Data.Nordigen.BankTransactions", null)
                        .WithMany("Booked")
                        .HasForeignKey("BankTransactionsId");

                    b.HasOne("BankoApi.Data.Nordigen.CreditorAccount", "CreditorAccount")
                        .WithMany()
                        .HasForeignKey("CreditorAccountId");

                    b.HasOne("BankoApi.Data.Nordigen.DebtorAccount", "DebtorAccount")
                        .WithMany()
                        .HasForeignKey("DebtorAccountId");

                    b.HasOne("BankoApi.Data.Nordigen.TransactionAmount", "TransactionAmount")
                        .WithMany()
                        .HasForeignKey("TransactionAmountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditorAccount");

                    b.Navigation("DebtorAccount");

                    b.Navigation("TransactionAmount");
                });

            modelBuilder.Entity("BankoApi.Data.Nordigen.Pending", b =>
                {
                    b.HasOne("BankoApi.Data.Nordigen.BankTransactions", null)
                        .WithMany("Pending")
                        .HasForeignKey("BankTransactionsId");

                    b.HasOne("BankoApi.Data.Nordigen.TransactionAmount", "TransactionAmount")
                        .WithMany()
                        .HasForeignKey("TransactionAmountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransactionAmount");
                });

            modelBuilder.Entity("BankoApi.Data.Nordigen.Transactions", b =>
                {
                    b.HasOne("BankoApi.Data.Nordigen.BankTransactions", "BankTransactions")
                        .WithMany()
                        .HasForeignKey("BankTransactionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankTransactions");
                });

            modelBuilder.Entity("BankoApi.Data.Nordigen.BankTransactions", b =>
                {
                    b.Navigation("Booked");

                    b.Navigation("Pending");
                });
#pragma warning restore 612, 618
        }
    }
}
